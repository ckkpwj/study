---

- name: 下发资源文件
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - {src: "metrics-server.yaml",dest: "{{ workdir }}/release/04-addons"}
    - {src: "ingress-nginx-values.yaml",dest: "{{ workdir }}/release/04-addons"}
    - {src: "calico.yaml",dest: "{{ workdir }}/release/04-addons"}
    - {src: "calico-vxlan.yaml",dest: "{{ workdir }}/release/04-addons"}
    - {src: "helm-v3.9.2-linux-amd64.tar.gz",dest: "{{ workdir }}/release/04-addons"}
    - {src: "nginx-ingress-controller-9.2.6.tgz",dest: "{{ workdir }}/release/04-addons"}

- template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - {src: "etcd-backuper.yaml.j2",dest: "{{ workdir }}/release/04-addons/etcd-backuper.yaml"}

- name: 安装helm
  shell: |
    tar -xf {{ workdir }}/release/04-addons/helm-v3.9.2-linux-amd64.tar.gz -C {{ workdir }}/release/04-addons && mv {{ workdir }}/release/04-addons/linux-amd64/helm /usr/local/bin/
    source <(helm completion bash)
    echo "source <(helm completion bash)" >> ~/.bashrc
  args:
    executable: /bin/bash
  when: helm_enable == "true"

- name: 安装calico
  shell: |
    calico_mode={{ calico_mode }}
    if [ $calico_mode == "vxlan" ];then
      kubectl apply -f {{ workdir }}/release/04-addons/calico-vxlan.yaml
    elif [ $calico_mode == "ipip" ];then
      kubectl apply -f {{ workdir }}/release/04-addons/calico.yaml
    fi
    sleep 30
    while [ "$(kubectl get node k8s-master1 | sed 1d | awk '{print $2}')" == "Ready" ]; do
      break
    done
    sleep 10
  args:
    executable: /bin/bash
  when: calico_enable == "true"

- name: 安装ingress-nginx
  shell: |
    helm upgrade --install nginx-ingress-controller {{ workdir }}/release/04-addons/nginx-ingress-controller-9.2.6.tgz -f {{ workdir }}/release/04-addons/ingress-nginx-values.yaml \
    -n ingress-nginx --create-namespace \
    --set ingressClassResource.default=true \
    --set kind=DaemonSet \
    --set daemonset.useHostPort=true \
    --set hostNetwork=true \
    --set dnsPolicy=ClusterFirstWithHostNet  \
    --set service.type=ClusterIP \
    --set defaultBackend.enabled=false
    sleep 5
  args:
    executable: /bin/bash
  when: ingress_enable == "true" and helm_enable == "true"

- name: 安装metrics-server
  shell: |
    kubectl apply -f {{ workdir }}/release/04-addons/metrics-server.yaml
    sleep 5
  args:
    executable: /bin/bash
  when: metrics_enable == "true"

- name: 安装etcd-backuper
  shell: |
    kubectl apply -f {{ workdir }}/release/04-addons/etcd-backuper.yaml
  args:
    executable: /bin/bash
  when: etcd_backup_enable == "true"
